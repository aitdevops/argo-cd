name: Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    
    - name: Set up Google Cloud auth
      uses: google-github-actions/auth@v1
      with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}  # Authenticates to Google Cloud using service account credentials

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        install_components: kubectl  # Installs the 'kubectl' component for interacting with Kubernetes clusters


    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.PROJECT_ID }}

    # - name: Set up Helm
    #   run: |
    #     curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

    # - name: Deploy cert-manager using Helm
    #   run: |
    #     helm repo add jetstack https://charts.jetstack.io
    #     helm repo update
    #     helm upgrade --install cert-manager jetstack/cert-manager \
    #       --namespace cert-manager --create-namespace \
    #       --version v1.15.3 --set crds.enabled=true

    # - name: Deploy ArgoCD using Helm
    #   run: |
    #     helm repo add argo https://argoproj.github.io/argo-helm
    #     helm repo update
    #     helm upgrade --install argocd argo/argo-cd \
    #       --namespace argocd --create-namespace \
    #       --version 5.24.0

    # - name: Deploy NGINX Ingress Controller using Helm
    #   run: |
    #     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    #     helm repo update
    #     helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
    #       --namespace ingress-nginx --create-namespace \
    #       --version 4.7.0

    # - name: Install ArgoCD Applications
    #   run:  |
    #     kubectl apply -f argo-apps/ -n argocd

    - name: Wait for Ingress to Get IP
      run: |
        echo "Waiting for the Ingress IP..."
        for i in {1..30}; do
          INGRESS_IP=$(kubectl get ingress -n argocd -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}")
          if [ -n "$INGRESS_IP" ]; then
            echo "Ingress IP is $INGRESS_IP"
            break
          fi
          echo "Waiting for ingress IP... ($i/30)"
          sleep 10
        done
        if [ -z "$INGRESS_IP" ]; then
          echo "Ingress IP was not found after waiting for 5 minutes."
          exit 1
        fi
        echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV

    - name: Update DNS Record in Cloud DNS
      run: |
        gcloud dns record-sets transaction start --zone=${{ secrets. }}
        gcloud dns record-sets transaction remove --name=${{ secrets.DNS_RECORD_NAME }} --type=A --zone=${{ secrets.DNS_ZONE }} --ttl=300 --quiet
        gcloud dns record-sets transaction add $INGRESS_IP --name=${{ secrets.DNS_RECORD_NAME }} --type=A --zone=${{ secrets.DNS_ZONE }} --ttl=300
        gcloud dns record-sets transaction execute --zone=${{ secrets.DNS_ZONE }}

    - name: Monitor Resources
      run: |
        kubectl get all --namespace cert-manager
        kubectl get all --namespace argocd
        kubectl get all --namespace ingress-nginx
        kubectl get svc --namespace argocd
        kubectl get ingress --namespace argocd

    - name: Rollback on Failure
      if: failure()
      run: |
        echo "Deployment failed. Rolling back..."
        helm rollback cert-manager --namespace cert-manager
        helm rollback argocd --namespace argocd
        helm rollback ingress-nginx --namespace ingress-nginx

    - name: Notify on Success
      if: success()
      run: echo "Deployment successful!"

    - name: Notify on Failure
      if: failure()
      run: echo "Deployment failed!"
